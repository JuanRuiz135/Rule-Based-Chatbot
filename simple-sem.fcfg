## Natural Language Toolkit: sem3.fcfg
##
## Alternative simple grammar with transitive verbs and 
## quantifiers for the book. 
## 
## Author: Ewan Klein <ewan@inf.ed.ac.uk> 
## URL: <http://nltk.sourceforge.net>
## For license information, see LICENSE.TXT

## modified by Benjamin Inden, Nottingham Trent University

% start S
############################
# Grammar Rules
#############################

S[SEM = <?subj(?vp)>] -> NP[NUM=?n,SEM=?subj] VP[NUM=?n,SEM=?vp]

NP[NUM=?n,SEM=<?det(?nom)> ] -> Det[NUM=?n,SEM=?det]  Nom[NUM=?n,SEM=?nom]
NP[LOC=?l,NUM=?n,SEM=?np] -> PropN[LOC=?l,NUM=?n,SEM=?np]

Nom[NUM=?n,SEM=?nom] -> N[NUM=?n,SEM=?nom]

VP[NUM=?n,SEM=?v] -> IV[NUM=?n,SEM=?v]
VP[NUM=?n,SEM=<?v(?obj)>] -> TV[NUM=?n,SEM=?v] NP[SEM=?obj]
VP[NUM=?n,SEM=<?v(?obj,?pp)>] -> DTV[NUM=?n,SEM=?v] NP[SEM=?obj] PP[+TO,SEM=?pp]

PP[+TO, SEM=?np] -> P[+TO] NP[SEM=?np]

#############################
# Lexical Rules
#############################

PropN[-LOC,NUM=sg,SEM=<\P.P(Boran)>] -> 'Boran'
PropN[-LOC,NUM=sg,SEM=<\P.P(Barkers)>] -> 'Barkers'
PropN[-LOC,NUM=sg,SEM=<\P.P(Puppies)>] -> 'Puppies'
PropN[-LOC,NUM=sg,SEM=<\P.P(Doggoland)>] -> 'Doggoland'

Det[NUM=sg,SEM=<\P Q.all x.(P(x) -> Q(x))>] -> 'every'
Det[NUM=pl,SEM=<\P Q.all x.(P(x) -> Q(x))>] -> 'all'
Det[SEM=<\P Q.exists x.(P(x) & Q(x))>] -> 'some'
Det[NUM=sg,SEM=<\P Q.exists x.(P(x) & Q(x))>] -> 'a'
Det[NUM=sg,SEM=<\P Q.exists x.(P(x) & Q(x))>] -> 'an'

N[NUM=pl,SEM=<\x.Retrievers(x)>] -> 'Retrievers'
N[NUM=pl,SEM=<\x.Berneses(x)>] -> 'Berneses'
N[NUM=pl,SEM=<\x.Huskies(x)>] -> 'Huskies'
N[NUM=pl,SEM=<\x.Sheperds(x)>] -> 'Sheperds'
N[NUM=pl,SEM=<\x.Pomskies(x)>] -> 'Pomskies'
N[NUM=sg,SEM=<\x.Retriever(x)>] -> 'Retriever'
N[NUM=sg,SEM=<\x.Bernese(x)>] -> 'Bernese'
N[NUM=sg,SEM=<\x.Husky(x)>] -> 'Husky'
N[NUM=sg,SEM=<\x.Sheperd(x)>] -> 'Sheperd'
N[NUM=sg,SEM=<\x.Pomsky(x)>] -> 'Pomsky'

TV[NUM=sg,SEM=<\X x.X(\y.is_named(x,y))>,TNS=pres] -> 'is_named'
TV[NUM=sg,SEM=<\X x.X(\y.be_in(x,y))>,TNS=pres] -> 'is_in'
TV[NUM=pl,SEM=<\X x.X(\y.be_in(x,y))>,TNS=pres] -> 'are_in'

P[+to] -> 'to'